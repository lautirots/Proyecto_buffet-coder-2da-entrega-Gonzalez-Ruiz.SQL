1-Descripción General de la Base de Datos

La base de datos "Buffet" está diseñada para gestionar las operaciones de un restaurante tipo buffet.
Incluye tablas para manejar clientes, empleados, menú, pedidos, inventario, reservaciones y promociones.

2.0 Estructura de la Base de Datos

2.1 Tablas Principales:

Clientes
Empleados
Categorias
Platos
Pedidos
DetallesPedido
Proveedores
Inventarios
Mesas
Reservaciones
Promociones
Ingredientes
Plato_Ingredientes
Recetas
Clientes_Fidelizacion

2.2 Vistas:
vistapedidos

Descripción:
Esta vista proporciona una visión consolidada de los pedidos,
incluyendo información del cliente y del empleado que atendió el pedido.
Está diseñada para simplificar consultas, 
mejorar la seguridad y organizar mejor los datos relacionados con los pedidos en el buffet.

Tablas utilizadas:
- Pedidos
- Clientes
- Empleados

Lógica del procedimiento:
1. Se seleccionan los campos idPedido y fecha de la tabla Pedidos.
2. Se une (JOIN) la tabla Clientes con Pedidos usando el id_cliente.
3. Se une (JOIN) la tabla Empleados con Pedidos usando el id_empleado.
4. Se selecciona el nombre del cliente y del empleado de sus respectivas tablas.

Resultado:
La vista devuelve una tabla con las siguientes columnas:
- idPedido: Identificador único del pedido.
- fecha: Fecha en que se realizó el pedido.
- nombre_cliente: Nombre del cliente que realizó el pedido.
- nombre_empleado: Nombre del empleado que atendió el pedido.

Uso previsto:
Esta vista facilita el seguimiento ágil tanto del dinero que sale como del que entra, 
permitiendo un análisis rápido de los pedidos, los clientes involucrados y los empleados que los atendieron.

2. VistaReservaciones

Descripción:
Esta vista ofrece una visión detallada de las reservaciones, 
incluyendo información del cliente y de la mesa reservada.
Su propósito es ayudar en la organización del establecimiento, 
evitando conflictos como la reserva de la misma mesa en el mismo horario.

Tablas utilizadas:
- Reservaciones
- Clientes
- Mesas

Lógica del procedimiento:
1. Se selecciona el idReservacion, fecha_reservacion, hora_reservacion y numero_personas de la tabla Reservaciones.
2. Se une (JOIN) la tabla Clientes con Reservaciones usando el idCliente.
3. Se une (JOIN) la tabla Mesas con Reservaciones usando el idMesa.
4. Se selecciona el nombre del cliente de la tabla Clientes y el numero_mesa de la tabla Mesas.

Resultado:
La vista devuelve una tabla con las siguientes columnas:
- idReservacion: Identificador único de la reservación.
- nombre_cliente: Nombre del cliente que hizo la reservación.
- numero_mesa: Número de la mesa reservada.
- fecha_reservacion: Fecha de la reservación.
- hora_reservacion: Hora de la reservación.
- numero_personas: Número de personas para la reservación.

Uso previsto:
Esta vista permite una gestión más eficiente de las reservaciones,
facilitando la verificación de disponibilidad de mesas y evitando conflictos de reservas. 
Además, proporciona una visión rápida de las reservaciones programadas con todos los detalles relevantes en una sola consulta.

Vista: Vista_Platos_Ingredientes
Descripción:
La vista Vista_Platos_Ingredientes permite visualizar la relación entre los platos y sus ingredientes. Incluye el nombre del plato, el nombre del ingrediente, la cantidad necesaria de cada ingrediente para el plato específico, y la unidad de medida en la que se expresa esa cantidad.

Campos:
Plato: Nombre del plato (proveniente de la tabla Platos).
Ingrediente: Nombre del ingrediente utilizado en el plato (proveniente de la tabla Ingredientes).
Cantidad_Necesaria: Cantidad del ingrediente necesaria para preparar el plato (proveniente de la tabla Plato_Ingredientes).
Unidad: Unidad de medida en la que se expresa la cantidad del ingrediente (proveniente de la tabla Ingredientes).
Tablas Relacionadas:
Platos: Tabla que contiene la información sobre los diferentes platos ofrecidos.
Plato_Ingredientes: Tabla que relaciona los platos con sus ingredientes, incluyendo la cantidad necesaria de cada ingrediente.
Ingredientes: Tabla que contiene la información de todos los ingredientes disponibles, incluyendo sus nombres y unidades de medida.
Objetivo/Beneficio:
Esta vista es útil para chefs y personal de cocina que necesitan una lista detallada de los ingredientes requeridos para preparar cada plato, junto con las cantidades exactas y las unidades de medida. Ayuda a gestionar la preparación de los platos y a asegurar que todos los ingredientes necesarios están disponibles en la cantidad correcta.

Vista: Vista_Recetas_Detalladas
Descripción:
La vista Vista_Recetas_Detalladas proporciona una descripción detallada de las recetas de los platos disponibles.
Incluye el nombre del plato, los pasos para su preparación, 
el tiempo estimado de preparación y el nivel de dificultad de la receta.

Campos:
Plato: Nombre del plato (proveniente de la tabla Platos).
Pasos: Descripción detallada de los pasos necesarios para preparar el plato (proveniente de la tabla Recetas).
Tiempo_Preparacion: Tiempo estimado para preparar el plato (proveniente de la tabla Recetas).
Dificultad: Nivel de dificultad de la receta,
que puede ser útil para asignar tareas según la experiencia del cocinero (proveniente de la tabla Recetas).
Tablas Relacionadas:
Platos: Tabla que contiene la información sobre los diferentes platos.
Recetas: Tabla que describe las recetas asociadas a cada plato, incluyendo los pasos de preparación,
el tiempo necesario y la dificultad.
Objetivo/Beneficio:
Esta vista es esencial para los cocineros y el personal de cocina,
ya que proporciona un acceso rápido a las recetas detalladas de cada plato.
Facilita la preparación adecuada y eficiente de los platos,
asegurando que se sigan los pasos correctos y se respeten los tiempos de cocción.

Vista: Vista_Platos_Categorias
Descripción:
La vista Vista_Platos_Categorias muestra una lista de platos junto con su categoría correspondiente.
Además, incluye una breve descripción y el precio de cada plato.

Campos:
Categoria: Nombre de la categoría a la que pertenece el plato (proveniente de la tabla Categorias).
Nombre_Plato: Nombre del plato (proveniente de la tabla Platos).
Descripcion_Plato: Descripción del plato, que puede incluir detalles sobre su preparación,
ingredientes principales, o estilo culinario (proveniente de la tabla Platos).
Precio_Plato: Precio del plato, útil para la gestión de ventas y el diseño del menú (proveniente de la tabla Platos).
Tablas Relacionadas:
Platos: Tabla que contiene la información sobre los diferentes platos.
Categorias: Tabla que organiza los platos en diferentes categorías, como "Entradas", "Platos Principales", etc.
Objetivo/Beneficio:
Esta vista es ideal para la gestión del menú y la categorización de los platos en un restaurante.
Facilita la visualización de los platos según sus categorías, 
lo que es útil para los camareros y el personal encargado de presentar y vender los platos a los clientes. 
También es beneficioso para el diseño y la actualización de menús,
al proporcionar una visión clara de los platos disponibles y sus precios.
Estas vistas optimizan el acceso a la información relacionada con pedidos y reservaciones,
mejorando la eficiencia operativa del buffet.

VistaPedidos
VistaReservaciones

2.3 Funciones:
Nombre de la Función: IngresosPorCategoria
Descripción:
Esta función calcula los ingresos totales generados por una categoría específica de platos,
dentro de un rango de fechas determinado. 
Es útil para analizar el rendimiento financiero de diferentes categorías de platos en el buffet durante períodos específicos.
Parámetros de entrada:

idCategoria (INT): El identificador de la categoría de platos para la cual se quieren calcular los ingresos.
fechaInicio (DATE): La fecha de inicio del período para el cálculo.
fechaFin (DATE): La fecha de fin del período para el cálculo.

Tablas utilizadas:

DetallesPedido
Platos
Categorias
Pedidos

Lógica del procedimiento:

Se declara una variable 'total' de tipo DECIMAL(10, 2) inicializada en 0.
Se realiza una consulta que:
a. Suma el producto de la cantidad de cada plato por su precio.
b. Une (JOIN) las tablas DetallesPedido, Platos, Categorias y Pedidos.
c. Filtra los resultados por la categoría especificada y el rango de fechas.
El resultado de la suma se almacena en la variable 'total'.
Se retorna el valor de 'total'.

Resultado:
La función devuelve un valor DECIMAL(10, 2)
que representa los ingresos totales de la categoría especificada dentro del rango de fechas dado.
Uso previsto:
Esta función puede ser utilizada para:

Analizar el desempeño financiero de diferentes categorías de platos.
Identificar las categorías más rentables en períodos específicos.
Ayudar en la toma de decisiones sobre el menú y las promociones.
Generar reportes de ingresos por categoría para la gestión financiera del buffet.

Ejemplo de uso:
SELECT IngresosPorCategoria(1, '2024-01-01', '2024-12-31') AS Ingresos_Categoria_1_2024;

Este ejemplo calcularía los ingresos totales de la categoría con ID 1 para todo el año 2024.
Consideraciones:

La función asume que los precios de los platos no cambian durante el período especificado.
Si no hay pedidos que cumplan con los criterios, la función devolverá 0.
Es importante asegurarse de que las fechas proporcionadas sean válidas y que el idCategoria exista en la tabla Categorias.

Esta función proporciona una herramienta valiosa para el análisis financiero y la toma de decisiones en la gestión del buffet,
permitiendo un seguimiento detallado de los ingresos por categoría de platos.

Función: ObtenerPrecioPlato
Descripción:
Esta función se utiliza para obtener el precio de un plato específico de una tabla llamada Platos.
Toma como parámetro el identificador del plato (idPlato) y devuelve su precio como un valor decimal con precisión de dos dígitos decimales.

DELIMITER $$

Cambia el delimitador de comandos por defecto (;) a $$ para que el bloque de código
de la función pueda incluir varios comandos sin ser interrumpido.
CREATE FUNCTION ObtenerPrecioPlato(idPlato INT)

Declara la creación de una nueva función llamada ObtenerPrecioPlato.
idPlato INT es el parámetro de entrada, el cual representa el identificador del plato.
RETURNS DECIMAL(10, 2)

Especifica el tipo de dato que la función devolverá.
En este caso, DECIMAL(10, 2) significa que el valor devuelto será un número decimal con hasta 10 dígitos en total, 
de los cuales 2 serán decimales.
DETERMINISTIC

Indica que la función siempre devolverá el mismo resultado para el mismo conjunto de valores de entrada,
sin importar cuántas veces se ejecute.
BEGIN ... END

Define el inicio y el final del bloque de código de la función.
DECLARE Precio DECIMAL(10, 2) DEFAULT 0;

Declara una variable local llamada Precio de tipo DECIMAL(10, 2), inicializada en 0.
Esta variable se utilizará para almacenar el precio del plato recuperado.
SELECT p.precio INTO Precio FROM Platos p WHERE p.idPlato = idPlato;

Realiza una consulta a la tabla Platos para seleccionar el valor de la columna precio y almacenarlo en la variable Precio.
La consulta filtra los resultados usando idPlato como criterio.
RETURN Precio;

Devuelve el valor almacenado en la variable Precio como resultado de la función.
DELIMITER ;

Restaura el delimitador de comandos por defecto (;).
Uso
Puedes llamar a esta función en tus consultas SQL de la siguiente manera:
SELECT ObtenerPrecioPlato(1);
Este ejemplo devuelve el precio del plato con idPlato igual a 1.

2.4 Procedimientos Almacenados:
Nombre del Procedimiento: AgregarCliente

Descripción:
Este procedimiento almacenado facilita la inserción de nuevos clientes en la tabla "Clientes" de la base de datos del buffet.
Está diseñado para simplificar el proceso de registro de clientes,
garantizando una gestión más eficiente de la información de los comensales.
Esto ayuda a mantener un registro preciso de los clientes, 
lo que es crucial para la organización del establecimiento y para proporcionar un mejor servicio.

Parámetros de entrada:
1. nombre (VARCHAR(100)): El nombre del cliente a agregar.
2. telefono (VARCHAR(20)): El número de teléfono del cliente.
3. email (VARCHAR(100)): La dirección de correo electrónico del cliente.

Tablas utilizadas:
- Clientes

Lógica del procedimiento:
1. El procedimiento toma los tres parámetros de entrada: nombre, telefono y email.
2. Realiza una operación INSERT INTO en la tabla Clientes.
3. Los valores de los parámetros se insertan en las columnas correspondientes de la tabla.

Resultado:
El procedimiento no devuelve ningún resultado directamente.
Sin embargo, inserta un nuevo registro en la tabla Clientes con la información proporcionada.

Uso previsto:
Este procedimiento puede ser utilizado para:
- Registrar nuevos clientes de manera rápida y eficiente.
- Mantener actualizada la base de datos de clientes del buffet.
- Facilitar la gestión de la información de los comensales.
- Mejorar la precisión en el control de la capacidad del establecimiento.

Ejemplo de uso:

CALL AgregarCliente('Juan Pérez', '123-456-7890', 'juan.perez@email.com');

Este ejemplo agregaría un nuevo cliente llamado Juan Pérez con su número de teléfono y dirección de correo electrónico.

Consideraciones:
- Es importante verificar que los datos ingresados sean válidos antes de llamar al procedimiento.
- El campo email en la tabla Clientes probablemente tenga una restricción UNIQUE, 
   por lo que se debe tener cuidado de no insertar emails duplicados.
- Si alguno de los campos es obligatorio en la tabla Clientes y no se proporciona un valor, el procedimiento podría fallar.
- Este procedimiento no maneja errores explícitamente,
   por lo que cualquier error (como violación de restricciones de la base de datos) 
    será manejado por el sistema de gestión de base de datos.

Beneficios:
1. Estandarización: Asegura que todos los nuevos clientes se agreguen de manera consistente.
2. Eficiencia: Simplifica el proceso de inserción, reduciendo la posibilidad de errores.
3. Mantenimiento: Centraliza la lógica de inserción, facilitando futuras modificaciones si son necesarias.
4. Organización: Contribuye a una mejor gestión de la capacidad del buffet al mantener un registro preciso de los clientes.

Este procedimiento almacenado es una herramienta valiosa para la gestión eficiente de la base de clientes del buffet, 
contribuyendo a una mejor organización y servicio al cliente.


2.5 Triggers:

Nombre del Trigger: ActualizarInventarioDespuesDeInsertar

Descripción:
Este trigger se activa automáticamente después de insertar un nuevo registro en la tabla DetallesPedido.
Su función principal es actualizar el inventario de platos,
reduciendo la cantidad disponible en la tabla Inventarios basándose en la cantidad de platos pedidos.
Esto asegura que el inventario se mantenga actualizado en tiempo real con cada nuevo pedido.

Tablas utilizadas:
- DetallesPedido (tabla de activación)
- Inventarios (tabla actualizada)

Lógica del procedimiento:
1. El trigger se activa AFTER INSERT, es decir, después de que se inserta un nuevo registro en DetallesPedido.
2. Para cada fila insertada (FOR EACH ROW):
   a. Se actualiza la tabla Inventarios.
   b. Se reduce la cantidad en inventario del plato correspondiente.
   c. La reducción es igual a la cantidad del plato en el nuevo pedido (NEW.cantidad).
   d. Se identifica el plato correcto usando NEW.idPlato.

Resultado:
El trigger no devuelve ningún resultado directamente.
Sin embargo, actualiza la tabla Inventarios, reduciendo la cantidad del plato correspondiente.

Uso previsto:
Este trigger se utiliza para:
- Mantener actualizado automáticamente el inventario de platos.
- Evitar descuadres entre los pedidos realizados y el inventario disponible.
- Facilitar el control de stock en tiempo real.
- Prevenir la venta de platos que ya no están disponibles.

Ejemplo de funcionamiento:
Supongamos que se inserta un nuevo registro en DetallesPedido:

INSERT INTO DetallesPedido (idPedido, idPlato, cantidad) VALUES (1, 5, 2);

El trigger se activará automáticamente y reducirá la cantidad del plato con idPlato = 5 en la tabla Inventarios en 2 unidades.

Consideraciones:
- Es crucial que exista un registro correspondiente en la tabla Inventarios para cada plato en DetallesPedido.
- Si la cantidad en inventario llega a cero o valores negativos, podría ser necesario implementar lógica adicional para manejar estas situaciones.
- Este trigger no verifica si hay suficiente inventario antes de la actualización.
   Podría ser necesario implementar controles adicionales para prevenir inventarios negativos.
- Un alto volumen de inserciones en DetallesPedido podría afectar el rendimiento debido a las actualizaciones constantes en Inventarios.

Beneficios:
1. Automatización: Elimina la necesidad de actualizar manualmente el inventario después de cada pedido.
2. Precisión: Reduce errores humanos en la gestión del inventario.
3. Tiempo real: Proporciona una visión actualizada del inventario en todo momento.
4. Eficiencia: Mejora la gestión de recursos y la planificación de compras.

Este trigger es una herramienta esencial para mantener la integridad entre los pedidos realizados y el inventario disponible
en el buffet, contribuyendo significativamente a una gestión más eficiente y precisa del negocio.



3.0 Descripción Detallada de las Tablas

3.1 Clientes:

Almacena información de los clientes.
Campos: idCliente (PK), nombre, telefono, email (único).

3.2 Empleados:

Registra datos de los empleados del buffet.
Campos: idEmpleado (PK), nombre, telefono, posicion, salario.

3.3 Categorias:

Categorías de platos ofrecidos.
Campos: idCategoria (PK), nombre.

3.4 Platos:

Detalla los platos disponibles en el menú.
Campos: idPlato (PK), nombre, descripcion, precio, idCategoria (FK).

3.5 Pedidos:

Registra los pedidos realizados.
Campos: idPedido (PK), fecha, id_cliente (FK), id_empleado (FK).

3.6 DetallesPedido:

Detalla los platos incluidos en cada pedido.
Campos: idDetalle (PK), idPedido (FK), idPlato (FK), cantidad.

3.7 Proveedores:

Información de los proveedores del buffet.
Campos: idProveedor (PK), nombre, telefono, email (único), direccion.

3.8 Inventarios:

Control de inventario de los platos.
Campos: idInventario (PK), idPlato (FK), cantidad, fecha_actualizacion.

3.9 Mesas:

Registro de las mesas del restaurante.
Campos: idMesa (PK), numero_mesa, capacidad, ubicacion.

3.10 Reservaciones:

Gestiona las reservaciones de mesas.
Campos: idReservacion (PK), idCliente (FK), idMesa (FK), fecha_reservacion, hora_reservacion, numero_personas.

3.11 Promociones:

Maneja las promociones ofrecidas por el restaurante.
Campos: idPromocion (PK), nombre, descripcion, descuento, fecha_inicio, fecha_fin.



Seguridad


Se ha configurado 'log_bin_trust_function_creators' como global para permitir la creación de funciones.
